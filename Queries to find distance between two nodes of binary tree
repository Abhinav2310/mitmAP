#include <bits/stdc++.h> 
#define MAX 100001 
using namespace std; 

/* A tree node structure */
struct Node { 
	int data; 
	struct Node* left; 
	struct Node* right; 
}; 

/* Utility function to create a new Binary Tree node */
struct Node* newNode(int data) 
{ 
	struct Node* temp = new struct Node; 
	temp->data = data; 
	temp->left = temp->right = NULL; 
	return temp; 
} 

// Array to store level of each node 
int level[MAX]; 

// Utility Function to store level of all nodes 
void FindLevels(struct Node* root) 
{ 
	if (!root) 
		return; 

	// queue to hold tree node with level 
	queue<pair<struct Node*, int> > q; 

	// let root node be at level 0 
	q.push({ root, 0 }); 
	pair<struct Node*, int> p; 

	// Do level Order Traversal of tree 
	while (!q.empty()) { 
		p = q.front(); 
		q.pop(); 

		// Node p.first is on level p.second 
		level[p.first->data] = p.second; 

		// If left child exits, put it in queue 
		// with current_level +1 
		if (p.first->left) 
			q.push({ p.first->left, p.second + 1 }); 

		// If right child exists, put it in queue 
		// with current_level +1 
		if (p.first->right) 
			q.push({ p.first->right, p.second + 1 }); 
	} 
} 

// Stores Euler Tour 
int Euler[MAX]; 

// index in Euler array 
int idx = 0; 

// Find Euler Tour 
void eulerTree(struct Node* root) 
{ 

	// store current node's data 
	Euler[++idx] = root->data; 

	// If left node exists 
	if (root->left) { 

		// traverse left subtree 
		eulerTree(root->left); 

		// store parent node's data 
		Euler[++idx] = root->data; 
	} 

	// If right node exists 
	if (root->right) { 

		// traverse right subtree 
		eulerTree(root->right); 

		// store parent node's data 
		Euler[++idx] = root->data; 
	} 
} 

// checks for visited nodes 
int vis[MAX]; 

// Stores level of Euler Tour 
int L[MAX]; 

// Stores indices of the first occurrence 
// of nodes in Euler tour 
int H[MAX]; 

// Preprocessing Euler Tour for finding LCA 
void preprocessEuler(int size) 
{ 
	for (int i = 1; i <= size; i++) { 
		L[i] = level[Euler[i]]; 

		// If node is not visited before 
		if (vis[Euler[i]] == 0) { 

			// Add to first occurrence 
			H[Euler[i]] = i; 

			// Mark it visited 
			vis[Euler[i]] = 1; 
		} 
	} 
} 

// Sparse table of size [MAX][LOGMAX] 
// M[i][j] is the index of the minimum value in 
// the sub array starting at i having length 2^j 
int M[MAX][18]; 

// Utility function to preprocess Sparse table 
void preprocessLCA(int N) 
{ 
	for (int i = 0; i < N; i++) 
		M[i][0] = i; 

	for (int j = 1; 1 << j <= N; j++) 
		for (int i = 0; i + (1 << j) - 1 < N; i++) 
			if (L[M[i][j - 1]] < L[M[i + (1 << (j - 1))][j - 1]]) 
				M[i][j] = M[i][j - 1]; 
			else
				M[i][j] = M[i + (1 << (j - 1))][j - 1]; 
} 

// Utility function to find the index of the minimum 
// value in range a to b 
int LCA(int a, int b) 
{ 
	// Subarray of length 2^j 
	int j = log2(b - a + 1); 
	if (L[M[a][j]] <= L[M[b - (1 << j) + 1][j]]) 
		return M[a][j]; 

	else
		return M[b - (1 << j) + 1][j]; 
} 

// Function to return distance between 
// two nodes n1 and n2 
int findDistance(int n1, int n2) 
{ 
	// Maintain original Values 
	int prevn1 = n1, prevn2 = n2; 

	// Get First Occurrence of n1 
	n1 = H[n1]; 

	// Get First Occurrence of n2 
	n2 = H[n2]; 

	// Swap if low>high 
	if (n2 < n1) 
		swap(n1, n2); 

	// Get position of minimum value 
	int lca = LCA(n1, n2); 

	// Extract value out of Euler tour 
	lca = Euler[lca]; 

	// return calculated distance 
	return level[prevn1] + level[prevn2] - 2 * level[lca]; 
} 

void preProcessing(Node* root, int N) 
{ 
	// Build Tree 
	eulerTree(root); 

	// Store Levels 
	FindLevels(root); 

	// Find L and H array 
	preprocessEuler(2 * N - 1); 

	// Build sparse table 
	preprocessLCA(2 * N - 1); 
} 

/* Driver function to test above functions */
int main() 
{ 
	// Number of nodes 
	int N = 8; 

	/* Constructing tree given in the above figure */
	Node* root = newNode(1); 
	root->left = newNode(2); 
	root->right = newNode(3); 
	root->left->left = newNode(4); 
	root->left->right = newNode(5); 
	root->right->left = newNode(6); 
	root->right->right = newNode(7); 
	root->right->left->right = newNode(8); 

	// Function to do all preprocessing 
	preProcessing(root, N); 

	cout << "Dist(4, 5) = " << findDistance(4, 5) << "\n"; 
	cout << "Dist(4, 6) = " << findDistance(4, 6) << "\n"; 
	cout << "Dist(3, 4) = " << findDistance(3, 4) << "\n"; 
	cout << "Dist(2, 4) = " << findDistance(2, 4) << "\n"; 
	cout << "Dist(8, 5) = " << findDistance(8, 5) << "\n"; 

	return 0; 
} 
